ggtitle("Cumulative Scree Plot") +
ylim(0,1)
grid.arrange(PVEplot, cumPVE, ncol = 2)
library(gridExtra) #plot arrengement
# PVE (aka scree) plot
PVEplot <- qplot(c(1:4), PVE) +
geom_line() +
xlab("Principal Component") +
ylab("PVE") +
ggtitle("Scree Plot") +
ylim(0, 1)
# Cumulative PVE plot
cumPVE <- qplot(c(1:4), cumsum(PVE)) +
geom_line() +
xlab("Principal Component") +
ylab(NULL) +
ggtitle("Cumulative Scree Plot") +
ylim(0,1)
grid.arrange(PVEplot, cumPVE, ncol = 2)
#doing all this with built in functions
pca_result <- prcomp(USArrests, scale = TRUE)
names(pca_result)
pca_result$center
pca_result$sdev
pca_result$scale
pca_result$rotation
biplot(pca_result,scale = 0)
pca_result$x <- - pca_result$x
biplot(pca_result,scale = 0)
ve<-pca_result$sdev^2
pve <- ve/sum(ve)
round(pve)
round(pve,2)
install.packages(c("FactoMineR", "factoextra"))
library(FactoMineR)
library(factoextra)
#data
data("decathlon2")
head(decathlon2)
decathon2.active <- decathlon2[1:23,1:10]
decathlon2.active <- decathlon2[1:23,1:10]
head(decathlon2.active[,1:6],4)
#r code using factominer
PCA(decathlon2.active,scale.unit = TRUE)
#using functions
get_eigenvalue(res.pca)
#r code using factominer
res.pca<-PCA(decathlon2.active,scale.unit = TRUE)
#using functions
get_eigenvalue(res.pca)
fviz_eig(res.pca)
get_pca_ind(res.pca) #individuals
get_pca_var(res.pca) #var
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
fviz_pca_biplot(res.pca)#biplot
#eigen value
library("factoextra")
eig.val <- get_eigenvalue(res.pca)
eig.val
#graph olf variable
var <- get_pca_var(res.pca)
var
# Coordinates
head(var$coord)
# Cos2: quality on the factore map
head(var$cos2)
# Contributions to the principal components
head(var$contrib)
fviz_pca_var(res.pca,col.var = "black")
library("corrplot")
corrplot(var$cos2, is.corr=FALSE)
# Total cos2 of variables on Dim.1 and Dim.2
fviz_cos2(res.pca, choice = "var", axes = 1:2)
#quality check
fviz_pca_var(res.pca, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
#contribution
library("corrplot")
corrplot(var$contrib, is.corr=FALSE)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
# Contributions of variables to PC3
fviz_contrib(res.pca, choice = "var", axes = 3, top = 10)
# Contributions of variables to PC4
fviz_contrib(res.pca, choice = "var", axes = 4, top = 10)
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
# Contributions of variables to PC3
fviz_contrib(res.pca, choice = "var", axes = 3, top = 10)
# Contributions of variables to PC4
fviz_contrib(res.pca, choice = "var", axes = 4, top = 10)
#total explanation
fviz_contrib(res.pca, choice = "var", axes = 1:4, top = 10)
#dimension description
res.desc <- dimdesc(res.pca, axes = c(1,2), proba = 0.05)
# Description of dimension 1
res.desc$Dim.1
res.desc$Dim.2
#graph for individual
ind <- get_pca_ind(res.pca)
ind
# Coordinates of individuals
head(ind$coord)
# Quality of individuals
head(ind$cos2)
# Contributions of individuals
head(ind$contrib)
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping (slow if many points)
)
fviz_pca_ind(res.pca, pointsize = "cos2",
pointshape = 21, fill = "#E7B800",
repel = TRUE # Avoid text overlapping (slow if many points)
)
fviz_pca_ind(res.pca, col.ind = "cos2", pointsize = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping (slow if many points)
)
fviz_cos2(res.pca, choice = "ind")
# Total contribution on PC1 and PC2
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
# Create a random continuous variable of length 23,
# Same length as the number of active individuals in the PCA
set.seed(123)
my.cont.var <- rnorm(23)
# Color individuals by the continuous variable
fviz_pca_ind(res.pca, col.ind = my.cont.var,
gradient.cols = c("blue", "yellow", "red"),
legend.title = "Cont.Var")
#small example of grouping
head(iris,3)
# The variable Species (index = 5) is removed
# before PCA analysis
iris.pca <- PCA(iris[,-5], graph = FALSE)
fviz_pca_ind(iris.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
#confidence elipse
# Add confidence ellipses
fviz_pca_ind(iris.pca, geom.ind = "point", col.ind = iris$Species,
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "confidence",
legend.title = "Groups"
)
#jco
fviz_pca_ind(iris.pca,
label = "none", # hide individual labels
habillage = iris$Species, # color by groups
addEllipses = TRUE, # Concentration ellipses
palette = "jco"
)
#customization of graphs
# Variables on dimensions 2 and 3
fviz_pca_var(res.pca, axes = c(2, 3))
# Individuals on dimensions 2 and 3
fviz_pca_ind(res.pca, axes = c(2, 3))
# Show variable points and text labels
fviz_pca_var(res.pca, geom.var = c("point", "text"))
# Show variable points and text labels
fviz_pca_var(res.pca, geom.var = c("point", "text"),repel = FALSE)
# Show variable points and text labels
fviz_pca_var(res.pca, geom.var = c("point", "text"),repel = TRUE)
# Show individuals text labels only
fviz_pca_ind(res.pca, geom.ind =  "text")
# Show individuals text labels only
fviz_pca_ind(res.pca, geom.ind =  "text",repel = TRUE)
# Change the size of arrows an labels
fviz_pca_var(res.pca, arrowsize = 1, labelsize = 5,
repel = TRUE)
# Change points size, shape and fill color
# Change labelsize
fviz_pca_ind(res.pca,
pointsize = 3, pointshape = 21, fill = "lightblue",
labelsize = 5, repel = TRUE)
# Add confidence ellipses
fviz_pca_ind(iris.pca, geom.ind = "point",
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "confidence",
legend.title = "Groups"
)
# Convex hull
fviz_pca_ind(iris.pca, geom.ind = "point",
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "convex",
legend.title = "Groups"
)
# Add confidence ellipses
fviz_pca_ind(iris.pca, geom.ind = "point",
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "norm",
legend.title = "Groups"
)
# Convex hull
fviz_pca_ind(iris.pca, geom.ind = "point",
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "t",
legend.title = "Groups"
)
# Add confidence ellipses
fviz_pca_ind(iris.pca, geom.ind = "point",
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, ellipse.type = "euclid",
legend.title = "Groups"
)
#group mean points
fviz_pca_ind(iris.pca,
geom.ind = "point", # show points only (but not "text")
group.ind = iris$Species, # color by groups
legend.title = "Groups",
mean.point = FALSE)
ind.p <- fviz_pca_ind(iris.pca, geom = "point", col.ind = iris$Species)
ggpubr::ggpar(ind.p,
title = "Principal Component Analysis",
subtitle = "Iris data set",
caption = "Source: factoextra",
xlab = "PC1", ylab = "PC2",
legend.title = "Species", legend.position = "top",
ggtheme = theme_gray(), palette = "jco"
)
#biplot
fviz_pca_biplot(res.pca, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
fviz_pca_biplot(iris.pca,
col.ind = iris$Species, palette = "jco",
addEllipses = TRUE, label = "var",
col.var = "black", repel = TRUE,
legend.title = "Species")
fviz_pca_biplot(iris.pca,
# Fill individuals by groups
geom.ind = "point",
pointshape = 21,
pointsize = 2.5,
fill.ind = iris$Species,
col.ind = "black",
# Color variable by groups
col.var = factor(c("sepal", "sepal", "petal", "petal")),
legend.title = list(fill = "Species", color = "Clusters"),
repel = TRUE        # Avoid label overplotting
)+
ggpubr::fill_palette("jco")+      # Indiviual fill color
ggpubr::color_palette("npg")      # Variable colors
fviz_pca_biplot(iris.pca,
# Individuals
geom.ind = "point",
fill.ind = iris$Species, col.ind = "black",
pointshape = 21, pointsize = 2,
palette = "jco",
addEllipses = TRUE,
# Variables
alpha.var ="contrib", col.var = "contrib",
gradient.cols = "RdYlBu",
legend.title = list(fill = "Species", color = "Contrib",
alpha = "Contrib")
)
#exporting results
# Print the plot to a pdf file
pdf("myplot.pdf")
print(myplot)
dev.off()
(res.pca)
(res.pca)
#exporting results
# Scree plot
scree.plot <- fviz_eig(res.pca)
# Plot of individuals
ind.plot <- fviz_pca_ind(res.pca)
# Plot of variables
var.plot <- fviz_pca_var(res.pca)
pdf("PCA.pdf") # Create a new pdf device
print(scree.plot)
print(ind.plot)
print(var.plot)
dev.off() # Close the pdf device
# Print scree plot to a png file
png("pca-scree-plot.png")
print(scree.plot)
dev.off()
# Print individuals plot to a png file
png("pca-variables.png")
print(var.plot)
dev.off()
# Print variables plot to a png file
png("pca-individuals.png")
print(ind.plot)
dev.off()
library(ggpubr)
ggexport(plotlist = list(scree.plot, ind.plot, var.plot),
filename = "PCA.pdf")
ggexport(plotlist = list(scree.plot, ind.plot, var.plot),
nrow = 2, ncol = 2,
filename = "PCA.pdf")
ggexport(plotlist = list(scree.plot, ind.plot, var.plot),
filename = "PCA.png")
# Export into a TXT file
write.infile(res.pca, "pca.txt", sep = "\t")
# Export into a CSV file
write.infile(res.pca, "pca.csv", sep = ";")
#extensive pca
mtcars.pca <- prcomp(mtcars[,c(1:7,10,11)], center = TRUE,scale. = TRUE)
summary(mtcars.pca)
str(mtcars.pca)
#plotting
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
ggbiplot(mtcars.pca)
#point label
ggbiplot(mtcars.pca, labels=rownames(mtcars))
mtcars.country <- c(rep("Japan", 3), rep("US",4), rep("Europe", 7),rep("US",3), "Europe", rep("Japan", 3), rep("US",4), rep("Europe", 3), "US", rep("Europe", 3))
ggbiplot(mtcars.pca,ellipse=TRUE,  labels=rownames(mtcars), groups=mtcars.country)
ggbiplot(mtcars.pca,ellipse=TRUE,choices=c(3,4),   labels=rownames(mtcars), groups=mtcars.country)
#import data
data <- read.csv("../Downloads/datasets_228_482_diabetes.csv")
head(data)
#first check for bias-ness in data
table(data$Outcome)
input_one_training_rows <- sample(1:nrow(input_ones), 0.8*nrow(input_ones))
#create training data
input_ones <- data[which(data$Outcome==1),]
input_zeros <- data[which(data$Outcome==0),]
set.seed(1)
input_one_training_rows <- sample(1:nrow(input_ones), 0.8*nrow(input_ones))
input_one_training_rows <- sample(1:nrow(input_zeros), 0.8*nrow(input_ones))
training_ones <- input_ones[input_ones_training_rows, ]
training_ones <- input_ones[input_one_training_rows, ]
training_zeros <- input_zeros[input_zero_training_rows, ]
trainingData <- rbind(training_ones, training_zeros)  # row bind the 1's and 0's
input_one_training_rows <- sample(1:nrow(input_ones), 0.8*nrow(input_ones))
input_zero_training_rows <- sample(1:nrow(input_zeros), 0.8*nrow(input_ones))
training_ones <- input_ones[input_one_training_rows, ]
training_zeros <- input_zeros[input_zero_training_rows, ]
trainingData <- rbind(training_ones, training_zeros)  # row bind the 1's and 0's
# Create Test Data
test_ones <- input_ones[-input_one_training_rows, ]
test_zeros <- input_zeros[-input_zero_training_rows, ]
testData <- rbind(test_ones, test_zeros)  # row bind the 1's and 0's
#build logit
logitMod <- glm(Output ~ .,data=trainingData,family =binomial(link = "logit"))
#build logit
logitMod <- glm(Outcome ~ .,data=trainingData,family =binomial(link = "logit"))
#optimal cutoff point
library(InformationValue)
optcutoff <- optimalCutoff(testData$Outcome, predicted)[1]
predicted <- predict(logitMod,testData,type = "response")
#optimal cutoff point
library(InformationValue)
optcutoff <- optimalCutoff(testData$Outcome, predicted)[1]
optcutoff
#model diagonsis
summary(logitMod)
vif(logitMod)
library(car)
vif(logitMod)
misClassError(testData$Outcome,predicted,threshold = optcutoff)
#roc curve
plotROC(testData$Outcome,predicted)
Concordance(testData$Outcome,predicted)
confusionMatrix(testData$Outcome,predicted,threshold = optcutoff)
setwd("../cloud/Employer/Data Science Basics/Statistics/")
#Exercise 1
#load the data
library(readxl)
exercise1 <- read_excel("Data/exercise1.xlsx")
View(exercise1)
install.packages("mlr")
install.packages("mice")
install.packages("rpart")
install.packages("randomForest")
install.packages("rMR")
install.packages("rHealthDataGov")
install.packages("bigrquery")
search()
installed.packages()
R CMD INSTALL [options] [l-lib] pkgs
install.packages("ade4")
install.packages("amap")
install.packages("BayesLogit")
install.packages("C50")
install.packages("lattice")
install.packages("MASS")
install.packages("mgcv")
install.packages("tidyquant")
install.packages("tidygenomics")
install.packages("ggraph")
install.packages("dygraphs")
install.packages("leaflet")
install.packages("ggmap")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("reshape2")
install.packages("sentimentr")
install.packages("rms")
#google analytics premium bigquery statistics
library(data.table)
data <- fread("https://github.com/GoogleCloudPlatform/google-analytics-premium-bigquery-statistics/blob/master/sample_data/train_data.csv")
setwd("../../machine learning basics/logistic regression/Projects/Remarketing List with predictive analysis/")
#loading the data
data <- read.csv("./data/train_data.csv")
#see head
head(data)
#see head
head(data)
view(data)
View(data)
#columns names
names(data)
#remove columns that are insignificant to me
data <- data[c(-1,-2,-22)]
#too much variable still left use pearson coreration to see colinearity
cor(data)
library(corrplot)
corrplot(data)
data
str(data)
?corrplot
corrplot(corr)
#too much variable still left use pearson coreration to see colinearity
corr<-cor(data)
library(corrplot)
corrplot(corr)
library(ggpubr)
corrplot1<-corrplot(corr)
ggexport(plotlist =list(corrplot1),
filename = "../plot_results/corelation.png")
ggexport(plotlist =list(corrplot1),
filename = "corelation.png")
corrplot1<-corrplot(corr)
library(ggpubr)
ggexport(plotlist =list(corrplot1),
filename = "corelation.png")
symnum(abs(cor(data1)),cutpoints = c(0, 0.2, 0.4, 0.6, 0.9, 1), symbols = c(" ", ".", "_", "+", "*"))
symnum(abs(cor(data)),cutpoints = c(0, 0.2, 0.4, 0.6, 0.9, 1), symbols = c(" ", ".", "_", "+", "*"))
#remove a_sum_total_hits and a_diffdays for .9 colinear value
data <- data[c(-3,-7)]
#removing midnignt_flag
data <- data[,c(-13)]
#we can run initial data model but first lets see balancing act
table(data$b_CV_flag)
model <- glm(b_CV_flag~.,data,family = binomial("logit"))
result <- summary(model)
result
#check for multicolinear data
vif(model)
#check for multicolinear data
library(car)
vif(model)
library(rms)
vif(model)
#removing _pageview for colinearity
#unchanged our basemodel data
data1 <- data[,c(-2)]
#new model
model1 <- glm(formula = b_CV_flag ~., data = data1, family = binomial("logit"))
result1 <- summary(model1)
result1
vif(model1)
#result view
prob <- data.frame(predict(model1_2, data1_2, type = "response"))
#result view
prob <- data.frame(predict(model1, data1, type = "response"))
gain <- cumsum(sort(prob[, 1], decreasing = TRUE)) / sum(prob)
png('gain_curve_plot.png')
plot(gain,main ="Gain chart",xlab="number of users", ylab="cumulative conversion rate")
dev.off()
#ROC CURVE
pred <- prediction(prob, data1_2$b_CV_flag)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
#ROC CURVE
pred <- prediction(prob, data1$b_CV_flag)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
qplot(x = perf@x.values[[1]], y = perf@y.values[[1]], xlab = perf@x.name, ylab = perf@y.name, main="ROC curve")
#ROC CURVE
pred <- predict(prob, data1$b_CV_flag)
#ROC CURVE
library(ROCR)
pred <- prediction(prob, data1$b_CV_flag)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
qplot(x = perf@x.values[[1]], y = perf@y.values[[1]], xlab = perf@x.name, ylab = perf@y.name, main="ROC curve")
#logistic regression model
log_model <- lrm(b_CV_flag~.,data=data1)
log_model
#logistic regression model
log_model <- lrm(b_CV_flag ~.,data=data1)
log_model
#logistic regression model
log_model <- lrm(b_CV_flag ~.,data1)
#coefficient
coef <- names(model1$coefficients)
value <- as.vector(model1$coefficients)
result <- data.frame(coef,value)
result
cat("\014")
